# -*- coding: utf-8 -*-
"""emp0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15brrKS1F7d9aXlfMfsQCO408KLVwXrnH
"""

import pandas as pd

data = pd.read_excel("/content/Employees.xlsx")

data.head()

data.info()

data.shape

data.isna().sum()

#data.dropna(inplace=True) For dropping NA values in the dataset

data.duplicated().sum()

#data.drop_duplicates(inplace = True) For dropping duplicates

data.head(3)

import matplotlib.pyplot as plt

data["Gender"].value_counts().sort_values(ascending = False).plot(kind = "pie")
plt.title("pie Chart of Gender Column")
plt.ylabel("")
plt.show()

data.head(2)

plt.hist(data["Job Rate"])
plt.title("Histogram of Job Rates")
plt.xlabel("count")
plt.show()

data["Job Rate"].describe()

data.groupby("Department")["Annual Salary"].mean().sort_values(ascending = False).head(7).plot(kind = "bar")
plt.title("Average Salary Graph by Department")
plt.xlabel("Department")
plt.ylabel("Average Salary")
plt.show()

data.groupby("Center")["Monthly Salary"].mean().sort_values(ascending = False)

data

data["Country"].unique()

data.groupby("Country")["Job Rate"].mean().sort_values(ascending= False).plot(kind = "bar")
plt.title("Job Rates by Countries")
plt.xlabel("Country")
plt.ylabel("Job Rate Average")
plt.show()

plt.hist(data["Overtime Hours"])
plt.title("Histogram of Overtime Hours")
plt.xlabel("Overtime Hours")
plt.show()

data["Overtime Hours"].describe()

data["Annual Salary"].describe()

data.columns

X = data[["Years","Job Rate"]]
y = data["Annual Salary"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.2)

len(y_train)

len(X_test)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train,y_train)

predslr = lr.predict(X_test)

from sklearn.metrics import mean_absolute_error

mean_absolute_error(predslr,y_test)

import joblib
joblib.dump(lr,"linearmodel.pkl")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import joblib
# import numpy
# 
# st.title("Salary Prediction App")
# 
# st.divider()
# 
# 
# st.write("With this app, you can get estimations for the salaries of the company employee")
# 
# years = st.number_input("Enter the years at company", value = 1, step=1, min_value = 0)
# jobrate = st.number_input("Enter the job rate", value=3.5, step = 0.5, min_value= 0.0)
# 
# X = [years,jobrate]
# 
# model = joblib.load("linearmodel.pkl")
# 
# st.divider()
# 
# predict = st.button("press the button for salary prediction")
# 
# st.divider()
# 
# if predict:
#   st.balloons()
#   X1 = np.array([X])
#   prediction = model.predict(X1)[0]
#   st.write(f"Salary prediction is {prediction:,.2f}")
#   else:
#     "Please press the button for app to make the prediction"